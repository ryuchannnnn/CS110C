          // if stack is empty, push the operator onto the stack
          if(a.isEmpty())
          {
            
          }
          else
          // else peek at the stack, if it is an operator greater or equal precedence, pop it from the stack and append it to postfixexp. keep peeking/popping until you encounter a "(" or an operator of lower precedence, or the stack becomes empty, then push the operator onto the stack 
          {
            operator2 = a.peek();
            ascii2 = operator2 - '0'; // converting char (operator) to its ascii value
            operator1 = infix[i];
            ascii1 = operator1 - '0'; // converting char (operator) to its ascii value
            if(ascii2 >= ascii1)
            {
              do
              {
                postFixExp += a.pop();
              }while(a.peek() != '(' || ascii1 > ascii2 || a.isEmpty());
              if(a.isEmpty())
              {
                a.push(infix[i]);
              }
            }
          } 
          // input 3-2
          // output 32